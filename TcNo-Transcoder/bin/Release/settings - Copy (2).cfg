# ----------------------------------------------------
# Welcome to TechNobo's Video Transcoder settings
# Created by TechNobo (Wesley Pyburn): https://tcno.co/
# GitHub Repo: https://github.com/TcNobo/TcNo-Transcoder
# ----------------------------------------------------


# ----------------------------------------------------
# --------------------- REQUIRED ---------------------
# ----------------------------------------------------
# Output format
OutputFormat=mp4

# Copy the audio?
# Yes = 1, No = 0.
# Converting from WEBM to MP4, with Opus audio causes issues, for example.
CopyAudio=1

# Audio codec
# (REQUIRES audiocopy setting above to be 0!)
# To check available encoders, start TcNo-Transcoder.exe with the -a or --audio argument.
# OR enter either x32 or x64, and run "nvencc --check-encoders" or "NVEncC64 --check-encoders"
AudioCodec=

# Ouput suffix
# What goes after the file, just before the extension
# suf=_Proxy >> eg: test_Proxy.mp4
Suffix=_Proxy

# Output directory
# Leave blank to save to the input file's folder.
# MAKE SURE IT DOES NOT HAVE A TRAILING \ 
# EG: D:\Proxies
OutputDirectory=D:\TO EDIT NEXT PROXY TEMP

# Resolution of the output file.
# eg. <640x360/1920x1080 etc> 
Resolution=640x360

# FPS of the output file.
# fps=<24/30/60/120/144 etc>
FPS=60

# Codec of the output file.
# codec=<h264/h265>
# To check available encoders, start TcNo-Transcoder.exe with the -v or --video argument.
# OR enter either x32 or x64, and run "nvencc --check-formats" or "NVEncC64 --check-formats"
VideoCodec=h264

# Output profile
# H.264: baseline, main, high(default), high444
# HEVC : main, main10, main444
# profile=<baseline/high/main10 etc>
EncoderProfile=baseline

# Output level
# - H.264: auto(default), 1, 1b, 1.1, 1.2, 1.3, 2, 2.1, 2.2, 3, 3.1, 3.2, 4, 4.1, 4.2, 5, 5.1, 5.2
# - HEVC:  auto(default), 1, 2, 2.1, 3, 3.1, 4, 4.1, 5, 5.1, 5.2, 6, 6.1, 6.2
# level=<auto/1/4.2/5.1 etc>
Level=auto

# Encoder preset
# preset=<default/performance/quality>
Preset=performance

# Output depth
# outdp=<8/10>
OutputDepth=8

# CUDA Schedule
# CUDA schedule mode (default: sync).
# auto: let CUDA driver to decide
# spin  : CPU will spin when waiting for GPU tasks, will provide the highest performance but with high CPU utilization.
# yield : CPU will yield when waiting for GPU tasks.
# sync  : CPU will sleep when waiting for GPU tasks, performance might drop slightly, while CPU utilization will be lower, especially on HW decode mode.
CUDASchedule=spin

# Input decode to Hardware or Software
# avhw: uses libavformat + cuvid for input, this enables full hw transcode and resize.
# avhw <native/cuda>       Native is default, I find it faster.
# avsw: uses avcodec + sw decoder, dedcoding input file with software.
# hwsw=<avhw <native/cuda> / avsw>
DecodeMode=avhw native

# Sample Aspect Ratio
# sar=<int>:<int>
# Leave blank if you won't use it.
SampleAspectRatio=1:1

# Lookahead
# Enable lookahead and lookahead depth (1-32). The default is 16 frames.
Lookahead=16

# GOP Length
# Default 0 frames
GOPLength=0

# Number of Consecutive B-Frames
# -h264 default: 3
# -HEVC default: 0
BFrames=3

# Number of Reference frames
# Default 3 frames
ReferenceFrames=3

# MV Precision
# Default: auto
# Can also be to:
# - Q-pel (High Quality)
# - half-pel
# - full-pel (Low Quality)
MVPrecision=full-pel

# Colormatrix
# Options: undef, auto, bt709, smpte170m, bt470bg, smpte240m, YCgCo, fcc, GBR, bt2020nc, bt2020c
# cm=<string>
Colormatrix=undef

# --------------------------
# ------- h264 ONLY -------
# --------------------------
# MAKE SURE TO TURN THESE OFF IF YOU'RE NOT USING h264
# --------------------------
# Use CABAC
# ON: cabac=1
# OFF: cabac=0
CABAC=1

# Deblock filter
# ON: 1
# OFF: 0
# If you're not using h264, leave it blank!
Deblock=1

# --------------------------

# --------------------------
# ------ VBR SETTINGS ------
# --------------------------
# Set the output bitrate/quality
# cqp <int>                encode in Constant QP Mode
# cqp <int>:<int>:<int>    encode in Constant QP Mode
# vbr <int>                bitrate for VBR mode (kbps)
# vbrhq <int>              bitrate for VBR (High Quality) mode (kbps)
# cbr <int>                bitrate for CBR mode (kbps)
# cbrhq <int>              bitrate for CBR (High Quality) mode (kbps)
Bitrate=cqp 15

# Set VBR quality (USE -1 IF NOT USING VBR ABOVE!)
# target quality for VBR mode (0-51, 0=auto)
# vbrq=<0-51>
VBRQuality=-1

# Set Max Bitrate in kbps (USE -1 IF NOT USING VBR ABOVE!)
# maxbr=<int>
MaxBitrate=-1
# --------------------------




# ----------------------------------------------------
# --------------------- OPTIONAL ---------------------
# ----------------------------------------------------
# Overwrite existing transcoded file, if exists.
# Default: 0 -> Will not overwrite.
# 1 -> Overwrites existing transcode, if exists already.
OverwriteExisting=0

# Choose a GPU to use
# To get a list of GPU's, run the command "NVEncC --check-device" or "NVEncC64 --check-device"
# MAKE SURE YOU KNOW WHAT GPU YOU'RE SETTING IT TO!
# Leave this BLANK to let NVEncC choose the best card automatically.
# gpu=<int>    eg. gpu=1
GPU=0

# bit=<32/64>    -- Chooses to use 32 or 64 bit Windows. Detects automatically if not set.
OSBit=

# Other arguments. Will be appended to the end of the command that is run.
# nvencc -arg -arg -arg -[Added Here]
# eg. otherargs=--interlace tff --crop 20,20,20,20 
# To see what arguments are available, enter either x32 or x64, and run "nvencc --help" or "NVEncC64 -h"
OtherArgs=

# Override EVERY other setting.
# Leaves only the input and output file automated. Set everything yourself in otherargs.
# Set to 1 to enable.
# 0 to disable (default)
Override=0

# Delete queue when processing started
# If to 1, the queue file will be deleted BEFORE proccesing.
# If processing fails, you will have to remake the queue
# Default is 0
DeleteOldQueue=0

# Delete queue when creating a new queue, via Shell menu.
# Default: 0
# 1 = Delete queue, when "New queue" used.
DelQueueOnNew=0

# Run command after completion.
# When a file finishes transcoding, the command will run.
# ----------------
# Variables
# ----------------
# %outF% is the output file that the program made. EG: D:\Videos\p_Proxy.mp4
# EG: ffmpeg -i "%outF%" "%outF%.mp3"
# Will be run as: ffmpeg -i "D:\Videos\p_Proxy.mp4" "D:\Videos\p_Proxy.mp4.mp3"
# For example.
# ----------------
# Keep in mind, the program is in either the x32 or x64 directory when this command is run.
# You can run multiple lines of code by creating another file (in the base directory -- not x32 or x64)
# Create a runafter.bat file in your TcNo-Transcoder directory, then enter the following as AfterCompletion:
# CALL runafter.bat
#
# This will open runafter.bat, in the same place as TcNo-Transcoder.exe. 
#
# Remember, this will run in the TcNo-Transcoder directory. You may need the full path of a program, if it's not already in PATH. IE: "c:\ffmpeg\ffmpeg.exe" instead of just entering "ffmpeg". Test it yourself by running the command from the TcNo-Transcoder folder.
# ----------------
# Default is blank.
# ----------------
AfterCompletion=
